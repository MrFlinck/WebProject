tPromise = null;

                // Device is now AAD-registered or timed out trying, and so stop trying to run the background task
                // to AADJ register the device.
                clearInterval(this.deviceRegistrationTaskScheduler);
                this.deviceRegistrationTaskScheduler = null;

                if (this.aadRegistered) {
                    // Re-create the OMADM sync tasks to force user policy sync upon AADJ completing.
                    return this.sessionUtilities.enrollmentApis.recreateEnrollmentTasksAsync();
                } else {
                    if (null === this.aadRegistrationHresult) {
                        // No registration failure, but still not registered.  Default to displaying timeout error ERROR_TIMEOUT.
                        this.aadRegistrationErrorString = this.sessionUtilities.formatNumberAsHexString(this.sessionUtilities.HRESULT_TIMEOUT, 8);
                    } else {
                        this.aadRegistrationErrorString = this.sessionUtilities.formatNumberAsHexString(this.aadRegistrationHresult.target, 8);
                    }
                }

                return;
            }).then(() => {
                return {
                    actionSucceeded: this.aadRegistered,
                    statusMessage: this.aadRegistrationErrorString
                };
            });
        }

        sendResultsToMdmServerAsync() {
            this.sessionUtilities.enrollmentApis.updateServerWithResult(true, this.sessionUtilities.runningInOobe());

            return WinJS.Promise.as({
                actionSucceeded: true,
                statusMessage: null
            });
        }

        prepareMultifactorAuthAsync() {
            this.sessionUtilities.logInfoEvent("BootstrapStatus: Requesting AAD user token");

            return CloudExperienceHostAPI.UtilStaticsCore.requestAADUserTokenAsync().then((result) => {
                this.sessionUtilities.logInfoEvent("BootstrapStatus: AAD user token successfully requested");

                return WinJS.Promise.as({
                    actionSucceeded: true,
                    statusMessage: null
                });
            },
            (e) => {
                this.sessionUtilities.logErrorEvent("BootstrapStatus: AAD user token request failed", e);

                return WinJS.Promise.as({
                    actionSucceeded: false,
                    statusMessage: null
                });
            });
        }

        // Category interface methods

        getId() {
            return "AccountSetupCategory";
        }

        getTitle() {
            return this.resourceStrings["BootstrapPageAccountSetupCategoryTitle"];
        }

        getIconClass() {
            return "icon-users";
        }

        getDisposition() {
            return (!this.sessionUtilities.runningInOobe() ? this.sessionUtilities.CATEGORY_DISPOSITION_VISIBLE : this.sessionUtilities.CATEGORY_DISPOSITION_IGNORED);
        }

        runsInOobe() {
            return false;
        }

        getInitializationPromise() {
            return WinJS.Promise.as(true);
        }

        getSub