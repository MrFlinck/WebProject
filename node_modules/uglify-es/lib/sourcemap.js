%29
        speak(stringToSpeak, question) {
            let constraint = null;
            switch (question) {
                case this.questionType.YESNOINITIAL:
                case this.questionType.YESNOCONFIRMREGION:
                    constraint = this.yesNoConstraints;
                    break;
                case this.questionType.OTHERCONSTRAINTS:
                    constraint = this.regionConstraints;
                    break;
            };
            CloudExperienceHostAPI.Speech.SpeechRecognition.promptForCommandsAsync(stringToSpeak, constraint).done((result) => {
                if (result == null) {
                    if ((constraint != null) && !this.processingFlag()) {
                        // result can be null either if there is no input from user or the user speaks unknown voice commands until the timeout
                        this.speak(this.resourceStrings.FinalRegionVoiceOver, this.questionType.FINAL);
                    }
                }
                else if (!this.processingFlag()) {
                    switch (question) {
                        case this.questionType.YESNOINITIAL:
                        case this.questionType.YESNOCONFIRMREGION:
                            // All responses requiring yes/no flow through this block, it can be either initial state where we try to confirm from the default region OR the confirm region state
                            // where we try to confirm the region based on user i/p
                            if (result.constraint.tag === CloudExperienceHostAPI.Speech.SpeechRecognitionKnownCommands.yes.tag) {
                                this.onYesClick();
                            }
                            else if (result.constraint.tag === CloudExperienceHostAPI.Speech.SpeechRecognitionKnownCommands.no.tag) {
                                if (question === this.questionType.YESNOINITIAL) {
                                    // If initial response was no, then we ask the user to speak the region.
                                    this.speak(this.resourceStrings.RegionToUseVoiceOver, this.questionType.OTHERCONSTRAINTS);
                                }
                                else {
                                    // If this is not the initial response, then Cortana can't select the region for the user and asks the user to enter manually
                                    this.speak(this.resourceStrings.FinalRegionVoiceOver, this.questionType.FINAL);
                                }
                            }
                            break;
                        case this.questionType.OTHERCONSTRAINTS:
                            let itemToSelect = this.items.find((region) => '#' + region.codeTwoLetter == result.constraint.tag);
                            if (itemToSelect) {
                                this.selectedItem(itemToSelect);
                                this.speak(this.resourceStrings.ConfirmRegionVoiceOver.replace("%1", this.selectedItem().displayName), this.questionType.YESNOCONFIRMREGION);
                            }
                            else {
                                this.speak(this.resourceStrings.FinalRegionVoiceOver, this.questionType.FINAL);
                            }
                            break;
                    }
                }
            });
        }

        onYesClick() {
            if (!this.processingFlag()) {
                this.processingFlag(true);

                uiHelpers.PortableDeviceHelpers.unsubscribeToDeviceInsertion(this.ge