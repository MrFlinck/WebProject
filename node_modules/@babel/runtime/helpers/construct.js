Time, fridayTime, saturdayTime, sundayTime];
                timeControls.forEach(function (control) {
                    control.winControl.disabled = hasOnlineSettings && !useOfflineShutdownToggle.winControl.checked;
                });
            }

            function cancelShutdownTimesAsyncThen(complete, error) {
                let platform = CloudExperienceHost.Environment.getPlatform();
                if ((navFlow != "RDXRACSKUINCLUSIVE") || (platform === CloudExperienceHost.TargetPlatform.MOBILE)) {
                    bridge.invoke("RetailDemo.Internal.RetailInfoSetter.setStringAsync", "shutdownTimeEnabled", "false");
                    complete();
                } else {
                    CloudExperienceHostBroker.RetailDemo.ConfigureRetailDemo.setRetailInfoStringValue("shutdownTimeEnabled", "false");
                    complete();
                }
    