
      <RunAfterInstall Condition="'$(RunAfterInstall)'==''">true</RunAfterInstall>
      <GeneratedFileExtension>.g$(DefaultLanguageSourceExtension)</GeneratedFileExtension>

      <OSVersion Condition="'$(OSVersion)' == ''">5.1.2600.0</OSVersion>

      <!-- Initialize some Local-Type_Ref related properties -->
      <_RequireMCPass2ForSatelliteAssemblyOnly>false</_RequireMCPass2ForSatelliteAssemblyOnly>
      <_RequireMCPass2ForMainAssembly>false</_RequireMCPass2ForMainAssembly>
  </PropertyGroup>

  <PropertyGroup>

      <IsApplication Condition="'$(OutputType)'=='exe'">true</IsApplication>
      <IsApplication Condition="'$(OutputType)'=='winexe'">true</IsApplication>
      <IsLibrary Condition="'$(OutputType)'=='library'">true</IsLibrary>
      <IsLibrary Condition="'$(OutputType)'=='module'">true</IsLibrary>

  </PropertyGroup>


  <PropertyGroup>

      <!--
          Inject AssignWinFXEmbeddedResource target at right stage.
      -->

      <PrepareResourceNamesDependsOn>
                    AssignWinFXEmbeddedResource;
                    $(PrepareResourceNamesDependsOn)
      </PrepareResourceNamesDependsOn>

  </PropertyGroup>


  <!-- Common Application and Library Property settings -->
  <PropertyGroup>

      <PrepareResourcesDependsOn>
                MarkupCompilePass1;
                AfterMarkupCompilePass1;
                MarkupCompilePass2ForMainAssembly;
                FileClassification;
                MainResourcesGeneration;
                $(PrepareResourcesDependsOn)
      </PrepareResourcesDependsOn>

  </PropertyGroup>


  <PropertyGroup>
        <!-- Add Markup compilation to the CoreCompileDependsOn so that the IDE inproc compilers (particularly VB)
             can "see" the generated source files. -->

      <CoreCompileDependsOn Condition="'$(BuildingInsideVisualStudio)' == 'true' ">
          DesignTimeMarkupCompilation;
          $(CoreCompileDependsOn)
      </CoreCompileDependsOn>

  </PropertyGroup>

  <Target Name="DesignTimeMarkupCompilation">

        <!-- Only if we are not actually performing a compile i.e. we are in design mode -->
        <CallTarget Condition="'$(BuildingProject)' != 'true'"
                Targets="MarkupCompilePass1" />
  </Target>

    <!--  WinFX specific ItemGroup  -->


    <ItemGroup Condition="'$(BuildingInsideVisualStudio)'=='true'">

         <!--
            Add WinFX specific Item names to AvailableItemName item, so that they can show up
            in a drop-down menu for Build Action field of the properties window in VisualStudio.
         -->

         <AvailableItemName Include="ApplicationDefinition" />
         <AvailableItemName Include="Page" />
         <AvailableItemName Include="Resource" />
         <AvailableItemName Include="SplashScreen" />
         <AvailableItemName Include="DesignData" />
         <AvailableItemName Include="DesignDataWithDesignTimeCreatableTypes" />
    </ItemGroup>


  <!--
       Prepare Resource For SatelliteAssemblies.
  -->

  <PropertyGroup Condition="'$(UICulture)' != ''" >
      <PrepareResourcesForSatelliteAssembliesDependsOn>
               SatelliteOnlyMarkupCompilePass2;
               SatelliteResourceGeneration;
               GenerateResourceWithCultureItem;
      </PrepareResourcesForSatelliteAssembliesDependsOn>
  </PropertyGroup>


  <Target Name="PrepareResourcesForSatelliteAssemblies"
          Condition="'$(UICulture)' != ''"
          DependsOnTargets="$(PrepareResourcesForSatelliteAssembliesDependsOn)" >

  </Target>


  <PropertyGroup>

    <!--
         Hook up AfterCompileWinFX to that it runs
         where AfterCompile would have run
    -->

    <CompileDependsOn>
        $(CompileDependsOn);
        _AfterCompileWinFXInternal
    </CompileDependsOn>


    <!--
         Any targets that _AfterCompileWinFXInternal depends on.

         After the xaml file is compiled, the build system needs to generate a final .loc file
         for localization support. MergeLocalizationDirectives target does this.