ARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoInternetOpenWith" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000050" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\ShellNoUseInternetOpenWith_2">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoInternetOpenWith" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000060" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\DisableHTTPPrinting_1">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataUser" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Policies\Microsoft\Windows NT\Printers" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="DisableHTTPPrinting" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000050" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\NC_NoRegistration">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Policies\Microsoft\Windows\Registration Wizard Control" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoRegistration" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000060" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\SearchCompanion_DisableFileUpdates">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Policies\Microsoft\SearchCompanion" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="DisableContentFileUpdates" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000060" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\ShellRemoveOrderPrints_1">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataUser" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoOnlinePrintsWizard" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000050" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\ShellRemoveOrderPrints_2">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoOnlinePrintsWizard" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000060" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\ShellRemovePublishToWeb_1">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataUser" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoPublishingWizard" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000050" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\ShellRemovePublishToWeb_2">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0100000000323D000000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="NoPublishingWizard" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000060" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\WinMSG_NoInstrumentation_1">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataUser" valueType="REG_BINARY" value="30313D0200000000323D010000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Policies\Microsoft\Messenger\Client" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="CEIP" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000050" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\WinMSG_NoInstrumentation_2">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0200000000323D010000000000" />
      <registryValue name="RegKeyPathRedirect" valueType="REG_SZ" value="Software\Policies\Microsoft\Messenger\Client" />
      <registryValue name="RegValueNameRedirect" valueType="REG_SZ" value="CEIP" />
      <registryValue name="Behavior" valueType="REG_DWORD" value="0x00000060" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager\default\ADMX_ICM\CEIPEnable">
      <registryValue name="policytype" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="mergealgorithm" valueType="REG_DWORD" value="0x00000003" />
      <registryValue name="admxMetadataDevice" valueType="REG_BINARY" value="30313D0000000000323D0100000ng *)commandName args:(NSArray *)args
{
  if (RCTIsMainQueue()) {
    // Already on the proper thread, so:
    // * No need to do a thread jump;
    // * No need to allocate a block.
    [self synchronouslyDispatchCommandOnUIThread:reactTag commandName:commandName args:args];
    return;
  }

  RCTExecuteOnMainQueue(^{
    [self synchronouslyDispatchCommandOnUIThread:reactTag commandName:commandName args:args];
  });
}

- (void)sendAccessibilityEvent:(ReactTag)reactTag eventType:(NSString *)eventType
{
  if (RCTIsMainQueue()) {
    // Already on the proper thread, so:
    // * No need to do a thread jump;
    // * No need to allocate a block.
    [self synchronouslyDispatchAccessbilityEventOnUIThread:reactTag eventType:eventType];
    return;
  }

  RCTExecuteOnMainQueue(^{
    [self synchronouslyDispatchAccessbilityEventOnUIThread:reactTag eventType:eventType];
  });
}

- (void)initiateTransaction:(MountingCoordinator const &)mountingCoordinator
{
  SystraceSection s("-[RCTMountingManager initiateTransaction:]");
  RCTAssertMainQueue();

  if (_transactionInFlight) {
    _followUpTransactionRequired = YES;
    return;
  }

  do {
    _followUpTransactionRequired = NO;
    _transactionInFlight = YES;
    [self performTransaction:mountingCoordinator];
    _transactionInFlight = NO;
  } while (_followUpTransactionRequired);
}

- (void)performTransaction:(MountingCoordinator const &)mountingCoordinator
{
  SystraceSection s("-[RCTMountingManager performTransaction:]");
  RCTAssertMainQueue();

  auto surfaceId = mountingCoordinator.getSurfaceId();

  mountingCoordinator.getTelemetryController().pullTransaction(
      [&](MountingTransaction const &transaction, SurfaceTelemetry const &surfaceTelemetry) {
        [self.delegate mountingManager:self willMountComponentsWithRootTag:surfaceId];
        _observerCoordinator.notifyObserversMountingTransactionWillMount(transaction, surfaceTelemetry);
      },
      [&](MountingTransaction const &transaction, SurfaceTelemetry const &surfaceTelemetry) {
        RCTPerformMountInstructions(
            transaction.getMutations(), _componentViewRegistry, _observerCoordinator, surfaceId);
      },
      [&](MountingTransaction const &transaction, SurfaceTelemetry const &surfaceTelemetry) {
        _observerCoordinator.notifyObserversMountingTransactionDidMount(transaction, surfaceTelemetry);
        [self.delegate mountingManager:self didMountComponentsWithRootTag:surfaceId];
      });
}

- (void)setIsJSResponder:(BOOL)isJSResponder
    blockNativeResponder:(BOOL)blockNativeResponder
           forShadowView:(facebook::react::ShadowView const &)shadowView
{
  ReactTag reactTag = shadowView.tag;
  RCTExecuteOnMainQueue(^{
    UIView<RCTComponentViewProtocol> *componentView = [self->_componentViewRegistry findComponentViewWithTag:reactTag];
    [componentView setIsJSResponder:isJSResponder];
  });
}

- (void)synchronouslyUpdateViewOnUIThread:(ReactTag)reactTag
                             changedProps:(NSDictionary *)props
                      componentDescriptor:(const ComponentDescriptor &)componentDescriptor
{
  RCTAssertMainQueue();
  UIView<RCTComponentViewProtocol> *componentView = [_componentViewRegistry findComponentViewWithTag:reactTag];
  SurfaceId surfaceId = RCTSurfaceIdForView(componentView);
  Props::Shared oldProps = [componentView props];
  Props::Shared newProps = componentDescriptor.cloneProps(
      PropsParserContext{surfaceId, *_contextContainer.get()}, oldProps, RawProps(convertIdToFollyDynamic(props)));

  NSSet<NSString *> *propKeys = componentView.propKeysManagedByAnimated_DO_NOT_USE_THIS_IS_BROKEN ?: [NSSet new];
  propKeys = [propKeys setByAddingObjectsFromArray:props.allKeys];
  componentView.propKeysManagedByAnimated_DO_NOT_USE_THIS_IS_BROKEN = nil;
  [componentView updateProps:newProps oldProps:oldProps];
  componentView.propKeysManagedByAnimated_DO_NOT_USE_THIS_IS_BROKEN = propKeys;

  const auto &newViewProps = *std::static_pointer_cast<const ViewProps>(newProps);

  if (props[@"transform"] &&
      !CATransform3DEqualToTransform(
          RCTCATransform3DFromTransformMatrix(newViewProps.transform), componentView.layer.transform)) {
    componentView.layer.transform = RCTCATransform3DFromTransformMatrix(newViewProps.transform);
  }
  if (props[@"opacity"] && componentView.layer.opacity != (float)newViewProps.opacity) {
    componentView.layer.opacity = newViewProps.opacity;
  }

  [componentView finalizeUpdates:RNComponentViewUpdateMaskProps];
}

- (void)synchronouslyDispatchCommandOnUIThread:(ReactTag)reactTag
                                   commandName:(NSString *)commandName
                                          args:(NSArray *)args
{
  RCTAssertMainQueue();
  UIView<RCTComponentViewProtocol> *componentView = [_componentViewRegistry findComponentViewWithTag:reactTag];
  [componentView handleCommand:commandName args:args];
}

- (void)synchronouslyDispatchAccessbilityEventOnUIThread:(ReactTag)reactTag eventType:(NSString *)eventType
{
  if ([@"focus" isEqualToString:eventType]) {
    UIView<RCTComponentViewProtocol> *componentView = [_componentViewRegistry findComponentViewWithTag:reactTag];
    UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, componentView);
  }
}

@end
